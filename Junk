/*
* generate random blades helper
*/

FileHandler::configuration generateBladesHelper(float xstart, float ystart, int idNumber, float yend){
FileHandler::configuration conf;
string s = to_string(idNumber);
conf._ID = "C" + s;
FileHandler::Point tstart, ttan1, ttan2, ttan3, ttan4, tend;
tstart._x = xstart; tstart._y = ystart; tstart._z = 0.0;

ttan1._x = xstart - xfactor1; ttan1._y = ystart + yfactor1; ttan1._z = 0.0;

ttan2._x = xstart - xfactor1; ttan2._y = ystart + yfactor2; ttan2._z = 0.0;

ttan3._x = xstart - xfactor2; ttan3._y = ystart + yfactor2; ttan3._z = 0.0;

ttan4._x = xstart - xfactor2; ttan4._y = ystart + yfactor1; ttan4._z = 0.0;

tend._x = xstart - xend;      tend._y = ystart + yend;      tend._z = 0.0;


conf.start = tstart; conf.tan1 = ttan1; conf.tan2 = ttan2;
conf.tan3 = ttan3; conf.tan4 = ttan4; conf.end = tend;

return conf;
}



/*
vector<float> updateGlobalVariables(float x, float y, float z, int index, float globalVariable){

vector<float> updatedV;

float oldY = y;
float temp_y = 0.0;
temp_y = _end._y + globalVariable;
if (temp_y >= y) { goReverse = false; }
if (temp_y <= y-.1){  goReverse = true; }
if (!goReverse) {
globalVariable -= changeVariable;
}
else{
globalVariable += changeVariable;
}


y += globalVariable;
x = calculateX2(oldY, y, x);
z = calculateX2(oldY, y, z);
updatedV.push_back(x);
updatedV.push_back(y);
updatedV.push_back(z);
keepGlobalVariable.erase(keepGlobalVariable.begin()+index);
keepGlobalVariable.insert(keepGlobalVariable.begin()+index, globalVariable);

return updatedV;
}*/


/*
* Lerp
*/
FileHandler::Point lerp(FileHandler::Point begin, FileHandler::Point end, float t){
float newX, newY, newZ;
float Begin_x = begin._x; float End_x = end._x;
float Begin_y = begin._y; float End_y = end._y;
float Begin_z = begin._z; float End_z = end._z;

if (Begin_x > End_x) newX -= t;
else newX +=t;

if (Begin_y > End_y) newY -= t;
else newY +=t;

if (Begin_z > End_z) newZ -= t;
else if(Begin_z < End_z ) newZ+= t;
FileHandler::Point tempPoint;
tempPoint._x = newX; tempPoint._y = newY; tempPoint._z = newZ;
return tempPoint;



}

/*
* Initilize Global Variables for each blade
*/
vector<float> generateInitialGlobalVariable(size_t number_of_blades){
vector<float> bigV;
for (int i=0; i < number_of_blades; i++) {
bigV.push_back(0.0);
}
return bigV;
}


/*
* Generate random blades
*/

void generateBlades(vector<FileHandler::Blade> &tblades, float yend, double iVal){
int idNumber = 4;
for (double i = iVal; i < 90; i  +=5) {
//cout << element << endl;
float element = i * .035;

FileHandler::Blade tBlade, tBlade1;
string s = to_string(idNumber);
tBlade._ID = "Blade_" + s;
idNumber ++;
s = to_string(idNumber);
tBlade1._ID = "Blade_"+ s;

tBlade.initial_configurations = generateBladesHelper(element, 0.0, idNumber, yend);
tblades.push_back(tBlade);
tBlade1.initial_configurations = generateBladesHelper(-element, 0.0, idNumber, yend);
tblades.push_back(tBlade1);

idNumber ++;
}
}


/*if (ex > 0.1) goReverse = false;
if (ex <= -0.1) goReverse = true;

if (!goReverse) {
float tempEY = ey;
ey -=0.005;
ex = calculateX2(tempEY, ey, ex);
ez-=0.005;
}
else {
float tempEY = ey;
ey +=0.005;
ex = calculateX2(tempEY, ey, ex);
ez +=0.0001;
}*/



//////////////////////////////////
int width = 0;
int height = 0;
short BitsPerPixel = 0;
vector<unsigned char> Pixels;

void LoadBitmap(const char* FilePath)
{
fstream hFile(FilePath, std::ios::in | std::ios::binary);
if (!hFile.is_open()) throw std::invalid_argument("Error: File Not Found.");

hFile.seekg(0, std::ios::end);
int Length = hFile.tellg();
hFile.seekg(0, std::ios::beg);
std::vector<std::uint8_t> FileInfo(Length);
hFile.read(reinterpret_cast<char*>(FileInfo.data()), 54);

if(FileInfo[0] != 'B' && FileInfo[1] != 'M')
{
hFile.close();
throw std::invalid_argument("Error: Invalid File Format. Bitmap Required.");
}

if (FileInfo[28] != 24 && FileInfo[28] != 32)
{
hFile.close();
throw std::invalid_argument("Error: Invalid File Format. 24 or 32 bit Image Required.");
}

BitsPerPixel = FileInfo[28];
width = FileInfo[18] + (FileInfo[19] << 8);
height = FileInfo[22] + (FileInfo[23] << 8);
std::uint32_t PixelsOffset = FileInfo[10] + (FileInfo[11] << 8);
std::uint32_t size = ((width * BitsPerPixel + 31) / 32) * 4 * height;
Pixels.resize(size);

hFile.seekg (PixelsOffset, std::ios::beg);
hFile.read(reinterpret_cast<char*>(Pixels.data()), size);
hFile.close();
}

//////////////////////////////////
void drawRectangle(){

glEnable(GL_TEXTURE_2D);
//glColor3f(.564, .490, .247);
glBegin(GL_QUADS);
glTexCoord2d(0.0,0.0); glVertex3f(0.0, 0.0, 0.0);
glTexCoord2d(1.0,0.0); glVertex3f(1.0, 0.0, 0.0);
glTexCoord2d(0.0,1.0); glVertex3f(0.0, 1.0, 0.0);
glTexCoord2d(1.0,1.0); glVertex3f(1.0, 1.0, 0.0);
glEnd();
glDisable(GL_TEXTURE_2D);
}

void texturing(const char* tgaFileName){
/// TGA LOADER
glGenTextures(1, texture);
// NS_TGALOADER::IMAGE tga;
// BitMapFile bmp  = *getbmp(tgaFileName);
LoadBitmap(tgaFileName);
//tga.LoadTGA(tgaFileName);
glBindTexture(GL_TEXTURE_2D, texture[0]);
//gluBuild2DMipmaps (GL_TEXTURE_2D, 4, tga.getWidth (), tga.getHeight (), GL_BGRA, GL_UNSIGNED_BYTE, tga.getDataForOpenGL  ());
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, Pixels.data());
glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,GL_NEAREST );
glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST );
glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,GL_NEAREST );
glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,GL_NEAREST);
// Specify how texture values combine with current surface color values.
glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);

}



void drawGrid(){
float odd = 0;
float even = .1;
int counter = 1;
glPointSize(3.0);

glPushMatrix();
glBegin(GL_POINTS);
while (odd <= counter) {
glColor3f(1.0, 0.0, 0.0);
glVertex3f(odd, 0.0, 0.0);
glColor3f(1.0, 0.4, 0.0);
glVertex3f(0.0, odd, 0.0);
odd +=0.2;
}
// NEGATIVE
odd = 0; even = 1; counter = -1;
while (odd >= counter) {
glColor3f(1.0, 0.0, 0.0);
glVertex3f(odd, 0.0, 0.0);
glColor3f(1.0, 0.4, 0.0);
glVertex3f(0.0, odd, 0.0);
odd -=0.2;


}

glEnd();
glPopMatrix();
}
